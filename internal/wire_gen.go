// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"gateway/internal/config"
	"gateway/internal/errors"
	"gateway/internal/lura/clients"
	"gateway/internal/lura/proxy"
	"gateway/internal/lura/servers"
	router2 "gateway/internal/router"
	"github.com/gin-gonic/gin"
	config2 "github.com/luraproject/lura/v2/config"
	"github.com/luraproject/lura/v2/logging"
	"github.com/luraproject/lura/v2/router"
)

// Injectors from wire.go:

func SetupRouter(cfg *config.Config, engine *gin.Engine, logger logging.Logger) (router.Router, error) {
	v := clients.ProvideHTTPRequestExecutor(logger)
	factory := proxy.ProvideProxyFactory(logger, v)
	routerRouter := router2.ProvideRouter(logger, factory, cfg, engine)
	return routerRouter, nil
}

func ProvideServiceConfig(cfg *config.Config) (*config2.ServiceConfig, error) {
	serviceConfig, err := router2.ProvideServiceConfig(cfg)
	if err != nil {
		return nil, err
	}
	return serviceConfig, nil
}

func ProvideEngine(logger logging.Logger, svcCfg *config2.ServiceConfig, cfg *config.Config) (*gin.Engine, error) {
	engine := router2.ProvideGinRouter(logger, svcCfg, cfg)
	return engine, nil
}

func ProvideServerHandlerRegistry(cfg *config.Config) (*servers.HandlerRegistry, error) {
	serverHandler := errors.ProvideServerHandler()
	v := servers.ProvideHandlers(serverHandler)
	handlerRegistry := servers.NewHandlerRegistry(v)
	return handlerRegistry, nil
}

func ProvideClientHandlerRegistry() (*clients.HandlerRegistry, error) {
	v := clients.ProvideHandlers()
	handlerRegistry := clients.NewHandlerRegistry(v)
	return handlerRegistry, nil
}

func ProvideProxyHandlerRegistry(cfg *config.Config) (*proxy.HandlerRegistry, error) {
	v := proxy.ProvideHandlers()
	handlerRegistry := proxy.NewHandlerRegistry(v)
	return handlerRegistry, nil
}
